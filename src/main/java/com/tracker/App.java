package com.tracker;

import java.util.Scanner;

import com.tracker.collection.CustomList;
import com.tracker.collection.Task;
import com.tracker.manager.DataSourceManager;
import com.tracker.manager.SearchManager;
import com.tracker.manager.SortManager;
import com.tracker.manager.TaskManager;



public class App {
    private static final Scanner scanner = new Scanner(System.in);
    private static final TaskManager taskManager = new TaskManager();
    private static final DataSourceManager dataSourceManager = new DataSourceManager();
    private static final SortManager sortManager = new SortManager();
    private static final SearchManager searchManager = new SearchManager();

    public static void main(String[] args) {
        System.out.println("üöÄ Task Tracker - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏");
        System.out.println("===============================================");
        
        boolean running = true;

        while (running) {
            showMainMenu();
            String choice = scanner.nextLine();

            switch (choice) {
                case "1" -> loadDataFromSource();
                case "2" -> showAllTasks();
                case "3" -> performSorting();
                case "4" -> performSearch();
                case "5" -> addTaskManually();
                case "6" -> performAdvancedSearch();
                case "7" -> saveTasksToFile();
                case "0" -> {
                    running = false;
                    System.out.println("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
                    shutdown();
                }
                default -> System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }

        scanner.close();
    }
    
    private static void showMainMenu() {
        System.out.println("\nüìã –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ:");
        System.out.println("1. üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞");
        System.out.println("2. üìù –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏");
        System.out.println("3. üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á");
        System.out.println("4. üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á");
        System.out.println("5. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤—Ä—É—á–Ω—É—é");
        System.out.println("6. üî¨ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –ø–æ–¥—Å—á–µ—Ç");
        System.out.println("7. üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª (append)");
        System.out.println("0. ‚ùå –í—ã—Ö–æ–¥");
        System.out.print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ");
    }
    
    private static void loadDataFromSource() {
        System.out.println("\nüìÅ –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:");
        System.out.println("1. üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞");
        System.out.println("2. üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–∞—á–∏");
        System.out.println("3. ‚úèÔ∏è  –†—É—á–Ω–æ–π –≤–≤–æ–¥");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫: ");
        
        String source = scanner.nextLine();

        CustomList<Task> tasks = switch (source) {
            case "1" -> {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ");
                String filePath = scanner.nextLine();
                yield dataSourceManager.loadFromFile(filePath);
            }
            case "2" -> {
                System.out.print("–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? ");
                int count = Integer.parseInt(scanner.nextLine());
                yield dataSourceManager.generateRandomTasks(count);
            }
            case "3" -> dataSourceManager.loadFromManualInput();
            default -> {
                System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞!");
                yield null;
            }
        };
        
        if (tasks != null && !tasks.isEmpty()) {
            taskManager.addTasks(tasks);
            System.out.println("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ " + tasks.size() + " –∑–∞–¥–∞—á");
        } else {
            System.out.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏");
        }
    }
    
    private static void showAllTasks() {
        CustomList<Task> tasks = taskManager.getAllTasks();
        if (tasks.isEmpty()) {
            System.out.println("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç");
            return;
        }
        
        System.out.println("\nüìù –í–°–ï –ó–ê–î–ê–ß–ò (" + tasks.size() + "):");
        for (int i = 0; i < tasks.size(); i++) {
            System.out.println((i + 1) + ". " + tasks.get(i));
        }
    }
    
    private static void performSorting() {
        System.out.println("\nüîÑ –¢–ò–ü–´ –°–û–†–¢–ò–†–û–í–ö–ò:");
        System.out.println("1. –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É");
        System.out.println("2. –ü–æ –¥–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
        System.out.println("3. –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é");
        System.out.println("4. –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞");
        System.out.println("5. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—É–∑—ã—Ä—å–∫–æ–º");
        System.out.println("6. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º");
        System.out.println("7. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–µ—Ç–Ω–æ—Å—Ç–∏ id (—á–µ—Ç–Ω—ã–µ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è)");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: ");
        
        String sortType = scanner.nextLine();
        CustomList<Task> sortedTasks = sortManager.sortTasks(taskManager.getAllTasks(), sortType);
        
        if (sortedTasks != null) {
            taskManager.updateTasks(sortedTasks);
            System.out.println("‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!");
            showAllTasks();
        } else {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ");
        }
    }
    
    private static void performSearch() {
        System.out.println("\nüîç –ü–û–ò–°–ö –ó–ê–î–ê–ß:");
        System.out.println("1. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é");
        System.out.println("2. –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É");
        System.out.println("3. –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ ID");
        System.out.println("4. –ü–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–∏–º–æ–≤");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞: ");
        
        String searchType = scanner.nextLine();
        
        switch (searchType) {
            case "1" -> {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞: ");
                String title = scanner.nextLine();
                CustomList<Task> results = searchManager.searchByTitle(taskManager.getAllTasks(), title);
                displaySearchResults(results);
            }
            case "2" -> {
                System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 1-LOW, 2-MEDIUM, 3-HIGH, 4-URGENT");
                String priorityInput = scanner.nextLine();
                Task.Priority priority = Task.Priority.valueOf(
                    switch(priorityInput) {
                        case "1" -> "LOW";
                        case "2" -> "MEDIUM";
                        case "3" -> "HIGH";
                        case "4" -> "URGENT";
                        default -> "LOW";
                    }
                );
                CustomList<Task> results = searchManager.searchByPriority(taskManager.getAllTasks(), priority);
                displaySearchResults(results);
            }
            case "3" -> {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –ø–æ–∏—Å–∫–∞: ");
                String raw = scanner.nextLine();
                try {
                    int id = Integer.parseInt(raw.trim());
                    Task result = searchManager.binarySearchById(taskManager.getAllTasks(), id);
                    if (result != null) {
                        System.out.println("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞: " + result);
                    } else {
                        System.out.println("‚ùå –ó–∞–¥–∞—á–∞ —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                    }
                } catch (NumberFormatException e) {
                    System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.");
                }
            }
            case "4" -> {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞: ");
                String term = scanner.nextLine();
                CustomList<Task> results = searchManager.searchUsingStreams(taskManager.getAllTasks(), term);
                displaySearchResults(results);
            }
            default -> System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞!");
        }
    }
    
    private static void performAdvancedSearch() {
        System.out.println("\nüî¨ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö –ò –ü–û–î–°–ß–ï–¢:");
        System.out.println("1. –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –≤—Ö–æ–∂–¥–µ–Ω–∏–π");
        System.out.println("2. –ü–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–∏–º–æ–≤");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø: ");
        
        String searchType = scanner.nextLine();
        
        switch (searchType) {
            case "1" -> {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–π: ");
                String term = scanner.nextLine();
                var counts = searchManager.countOccurrencesMultiThreaded(taskManager.getAllTasks(), term);
                displayCountResults(counts, term);
            }
            case "2" -> {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞: ");
                String term = scanner.nextLine();
                CustomList<Task> results = searchManager.searchUsingStreams(taskManager.getAllTasks(), term);
                displaySearchResults(results);
            }
            default -> System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞!");
        }
    }
    
    private static void displaySearchResults(CustomList<Task> results) {
        if (results.isEmpty()) {
            System.out.println("‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        } else {
            System.out.println("‚úÖ –ù–∞–π–¥–µ–Ω–æ " + results.size() + " –∑–∞–¥–∞—á:");
            for (Task task : results) {
                System.out.println("- " + task);
            }
        }
    }
    
    private static void displayCountResults(java.util.Map<String, Long> counts, String term) {
        if (counts.isEmpty()) {
            System.out.println("‚ùå –í—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        } else {
            System.out.println("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥—Å—á–µ—Ç–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–π '" + term + "':");
            counts.forEach((key, value) -> 
                System.out.println("  " + key + ": " + value + " —Ä–∞–∑"));
        }
    }
    
    private static void addTaskManually() {
        CustomList<Task> newTasks = dataSourceManager.loadFromManualInput();
        if (newTasks != null && !newTasks.isEmpty()) {
            taskManager.addTasks(newTasks);
            System.out.println("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: " + newTasks.size());
            showAllTasks();
        } else {
            System.out.println("‚ùå –ó–∞–¥–∞—á–∏ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
        }
    }

    private static void saveTasksToFile() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ");
        String filePath = scanner.nextLine();
        CustomList<Task> tasks = taskManager.getAllTasks();
        boolean ok = dataSourceManager.saveTasksAppend(filePath, tasks);
        System.out.println(ok ? "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ (append)" : "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å");
    }
    
    private static void shutdown() {
        System.out.println("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...");
        sortManager.shutdown();
        searchManager.shutdown();
        System.out.println("‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
    }
}

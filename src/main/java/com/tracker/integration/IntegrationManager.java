package com.tracker.integration;

import com.tracker.collection.CustomList;
import com.tracker.collection.Task;

import java.util.List;

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥—É–ª—è–º–∏ –∫–æ–º–∞–Ω–¥—ã
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
public class IntegrationManager {
    private TaskProvider taskProvider;
    private FileDataProvider fileDataProvider;
    private SortProvider sortProvider;
    private SearchProvider searchProvider;
    
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    public IntegrationManager() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–ª—É—à–∫–∞–º–∏ - –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
        this.taskProvider = new MockTaskProvider();
        this.fileDataProvider = new MockFileDataProvider();
        this.sortProvider = new MockSortProvider();
        this.searchProvider = new MockSearchProvider();
    }
    
    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
    public TaskProvider getTaskProvider() { return taskProvider; }
    public FileDataProvider getFileDataProvider() { return fileDataProvider; }
    public SortProvider getSortProvider() { return sortProvider; }
    public SearchProvider getSearchProvider() { return searchProvider; }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    public void setTaskProvider(TaskProvider taskProvider) {
        this.taskProvider = taskProvider;
    }
    
    public void setFileDataProvider(FileDataProvider fileDataProvider) {
        this.fileDataProvider = fileDataProvider;
    }
    
    public void setSortProvider(SortProvider sortProvider) {
        this.sortProvider = sortProvider;
    }
    
    public void setSearchProvider(SearchProvider searchProvider) {
        this.searchProvider = searchProvider;
    }
    
    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    private static class MockTaskProvider implements TaskProvider {
        @Override
        public CustomList<Object> getAllTasks() {
            System.out.println("üìù MockTaskProvider: –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á (–∑–∞–≥–ª—É—à–∫–∞)");
            return CustomList.of();
        }
        
        @Override
        public int getTaskCount() {
            return 0;
        }
        
        @Override
        public boolean isEmpty() {
            return true;
        }
    }
    
    private static class MockFileDataProvider implements FileDataProvider {
        @Override
        public CustomList<Task> loadFromFile(String filePath) {
            System.out.println("üìÅ MockFileDataProvider: –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞ " + filePath + " (–∑–∞–≥–ª—É—à–∫–∞)");
            return CustomList.of();
        }
        
        @Override
        public boolean saveToFile(String filePath, CustomList<Task> tasks) {
            System.out.println("üíæ MockFileDataProvider: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª " + filePath + " (–∑–∞–≥–ª—É—à–∫–∞)");
            return true;
        }
        
        @Override
        public CustomList<Task> generateRandomTasks(int count) {
            System.out.println("üé≤ MockFileDataProvider: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è " + count + " —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–¥–∞—á (–∑–∞–≥–ª—É—à–∫–∞)");
            return CustomList.of();
        }
    }
    
    private static class MockSortProvider implements SortProvider {
        @Override
        public CustomList<Object> sortById(CustomList<Object> tasks) {
            System.out.println("üîÑ MockSortProvider: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ID (–∑–∞–≥–ª—É—à–∫–∞)");
            return tasks;
        }
        
        @Override
        public CustomList<Object> sortByTitle(CustomList<Object> tasks) {
            System.out.println("üîÑ MockSortProvider: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–∑–∞–≥–ª—É—à–∫–∞)");
            return tasks;
        }
        
        @Override
        public CustomList<Object> sortByPriority(CustomList<Object> tasks) {
            System.out.println("üîÑ MockSortProvider: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–∑–∞–≥–ª—É—à–∫–∞)");
            return tasks;
        }
        
        @Override
        public CustomList<Object> sortEvenOnly(CustomList<Object> tasks) {
            System.out.println("üîÑ MockSortProvider: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —á—ë—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)");
            return tasks;
        }
    }
    
    private static class MockSearchProvider implements SearchProvider {
        @Override
        public Object binarySearchById(CustomList<Object> tasks, int id) {
            System.out.println("üîç MockSearchProvider: –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ ID " + id + " (–∑–∞–≥–ª—É—à–∫–∞)");
            return null;
        }
        
        @Override
        public CustomList<Object> searchByTitle(CustomList<Object> tasks, String title) {
            System.out.println("üîç MockSearchProvider: –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é '" + title + "' (–∑–∞–≥–ª—É—à–∫–∞)");
            return CustomList.of();
        }
        
        @Override
        public CustomList<Object> searchByPriority(CustomList<Object> tasks, int priority) {
            System.out.println("üîç MockSearchProvider: –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É " + priority + " (–∑–∞–≥–ª—É—à–∫–∞)");
            return CustomList.of();
        }
    }
}
